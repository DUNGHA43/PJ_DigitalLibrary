@page "/documents"
@using DigitalLibrary.Client.Services
@using DigitalLibrary.Shared.DTO
@using MudBlazor
@inject NavigationManager NavigationManager
@inject DocumentsServices Documents
@inject SubjectsServices SubjectServices
@inject CategoriesServices CategoriesServices
@inject AuthorsServices AuthorsServices
@inject StatisticServices StatisticServices
@inject IJSRuntime JS
@inject ISnackbar Snackbar

<div class="home-page">
    <section class="book-category">
        <div class="category-header">
            <h2 class="category-title">@pageTitle</h2>
        </div>

        @if (documentGroups != null && documentGroups.Any())
        {
            @foreach (var group in documentGroups)
            {
                <div class="group-container">
                    <div class="group-header">
                        @if (filterGroup != "filter")
                        {
                            <h3>@group.GroupKey</h3>
                        }
                        else
                        {
                            
                        }
                    </div>

                    <div class="book-list">
                        @foreach (var book in group.Documents)
                        {
                            <div class="book-card" @onclick="() => GoToBookDetail(book.id)">
                                <div class="pdf-badge">PDF</div>
                                <div class="level-badge @GetAccessClass(book.accesslevel)">
                                    @book.accesslevel
                                </div>
                                <img src="@($"https://Server.dunghalibrary.id.vn{book.imageurl}")" alt="@book.title" class="book-thumbnail" />
                                <div class="book-info">
                                    <p class="book-title">@book.title</p>
                                    <p class="book-downloads">Lượt xem: @lstStatistic.FirstOrDefault(s => s.documentid == book.id)!.views</p>
                                    @* <p class="book-author">Xuất bản bởi: @(book.Authors != null && book.Authors.Any() ? string.Join(", ", book.Authors) : "Không rõ")</p> *@
                                    <p class="book-author">Xuất bản bởi: @book.publisher</p>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        }
        else
        {
            <p>Xin lỗi, không có tài liệu phù hợp!</p>
        }

        <!-- Phân trang -->
        @if (totalPages > 1)
        {
            <div class="pagination">
                <button @onclick="PreviousPage" disabled="@(!canGoPrevious)">Trước</button>
                <span>Trang @currentPage / @totalPages</span>
                <button @onclick="NextPage" disabled="@(!canGoNext)">Tiếp</button>
            </div>
        }
    </section>
</div>

@code {
    private List<DocumentGroupDTO> documentGroups = new List<DocumentGroupDTO>();
    private string pageTitle = "Tất cả tài liệu";
    private List<SubjectDTO> lstSub = new List<SubjectDTO>();
    private List<AuthorsDTO> lstAu = new List<AuthorsDTO>();
    private List<CategoriesDTO> lstCate = new List<CategoriesDTO>();
    private List<StatisticDTO> lstStatistic = new List<StatisticDTO>();

    private int currentPage = 1;
    private int pageSize = 12;
    private int totalPages = 1;
    private bool canGoPrevious => currentPage > 1;
    private bool canGoNext => currentPage < totalPages;

    [Parameter][SupplyParameterFromQuery] public int? author { get; set; }
    [Parameter][SupplyParameterFromQuery] public int? category { get; set; }
    [Parameter][SupplyParameterFromQuery] public int? subject { get; set; }
    [Parameter][SupplyParameterFromQuery] public string? accessLevel { get; set; }
    [Parameter][SupplyParameterFromQuery] public string? searchName { get; set; }
    [Parameter][SupplyParameterFromQuery] public string? filterGroup { get; set; }

    protected override async Task OnInitializedAsync()
    {
        lstAu = await AuthorsServices.GetAuthorsAsync();
        lstSub = await SubjectServices.GetSubjectsAsync();
        lstCate = await CategoriesServices.GetCategoriesAsync();
        lstStatistic = await StatisticServices.GetStatisticAsync();
        await LoadDocumentsAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (filterGroup == "filter")
        {
            pageTitle = "Kết quả lọc tài liệu";
        }
        else if (author.HasValue)
        {
            var authorName = lstAu.FirstOrDefault(au => au.id == author)!.fullname;
            pageTitle = $"Sách của tác giả: {authorName}";
        }
        else if (category.HasValue)
        {
            var categoryName = lstCate.FirstOrDefault(ca => ca.id == category)!.catename;
            pageTitle = $"Thể loại: {categoryName}";
        }
        else if (subject.HasValue)
        {
            var subjectName = lstSub.FirstOrDefault(au => au.id == subject)!.subjectname;
            pageTitle = $"Chủ đề: {subjectName}";
        }
        else if (!string.IsNullOrEmpty(accessLevel))
        {
            if (accessLevel == "")
            {
                pageTitle = "Tài liệu theo hạng truy cập";
            }
            else
            {
                pageTitle = $"Hạng truy cập: {accessLevel}";
            }
        }
        else if (!string.IsNullOrEmpty(filterGroup))
        {
            if (filterGroup == "accesslevel")
            {
                pageTitle = "Tài liệu theo hạng truy cập";
            }
            else if (filterGroup == "subject")
            {
                pageTitle = "Tài liệu theo chủ đề";
            }
            else if (filterGroup == "category")
            {
                pageTitle = "Tài liệu theo thể loại";
            }
            else if (filterGroup == "author")
            {
                pageTitle = "Tài liệu tác giả";
            }
        }
        else if (!string.IsNullOrEmpty(searchName))
        {
            pageTitle = $"Kết quả tìm kiếm:";
        }
        else
        {
            pageTitle = "Tất cả tài liệu:";
        }
        await LoadDocumentsAsync();
    }

    private async Task LoadDocumentsAsync()
    {
        var result = await Documents.GetDocumentByFilterAsync(subject, author, category, accessLevel, searchName, filterGroup, currentPage, pageSize);
        documentGroups = result?.ToList() ?? new List<DocumentGroupDTO>();

        if (documentGroups.Any())
        {
            totalPages = (int)Math.Ceiling((double)documentGroups.First().TotalCount / pageSize);
        }
        else
        {
            totalPages = 1;
        }
    }

    private async Task PreviousPage()
    {
        if (canGoPrevious)
        {
            currentPage--;
            await LoadDocumentsAsync();
        }
    }

    private async Task NextPage()
    {
        if (canGoNext)
        {
            currentPage++;
            await LoadDocumentsAsync();
        }
    }

    private async Task GoToBookDetail(int bookId)
    {
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "accessToken");
        if (string.IsNullOrEmpty(token))
        {
            Snackbar.Add("Bạn phải đăng nhập mới có thể xem tài liệu!", Severity.Warning);
        }
        else
        {
            NavigationManager.NavigateTo($"/detaildocument?document={bookId}");
        }
    }

    private string GetAccessClass(string accessLevel) => accessLevel switch
    {
        "Basic" => "access-basic",
        "Vip" => "access-vip",
        "Pro" => "access-pro",
        _ => "access-basic"
    };
}

<style>
    :root {
        --background-color: #ffffff;
        --text-color: black;
        --card-bg: #fcfcfc;
        --shadow-color: rgba(0, 0, 0, 0.1);
        --hover-shadow: rgba(0, 0, 0, 0.2);
        --pdf-badge-bg: black;
        --pdf-badge-text: white;
    }

    body {
        background-color: var(--background-color);
        color: var(--text-color);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .group-container {
        margin-bottom: 40px;
    }

    .group-header {
        font-size: 22px;
        font-weight: bold;
        color: #2c3e50;
        margin-bottom: 15px;
    }

    .book-list {
        display: grid;
        flex-wrap: wrap;
        gap: 15px;
        grid-template-columns: repeat(6, 1fr);
        justify-content: center;
        margin-bottom: 20px;
    }

    .category-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .category-title {
        font-size: 24px;
        font-weight: bold;
        align-items: center;
        color: #000;
        margin: 0;
    }

    .see-more {
        font-size: 14px;
        color: #000;
        text-decoration: none;
        font-weight: bold;
        transition: color 0.3s;
        margin-bottom: 10px;
    }

        .see-more:hover {
            color: #0056b3;
            text-decoration: underline;
        }

    .book-category {
        margin: 10px auto;
        text-align: left;
        padding: 30px;
        min-height: 460px;
    }

    .book-subject {
        margin: 10px auto;
        text-align: left;
        padding: 30px;
    }

    .book-card {
        background: var(--card-bg);
        box-shadow: 0px 4px 8px var(--shadow-color);
        transition: transform 0.2s ease-in-out, box-shadow 0.3s;
        border-radius: 4px;
        width: 200px;
        height: 350px;
        position: relative;
        cursor: pointer;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        padding: 10px 20px 0 20px;
        padding: 12px;
        margin: 0 10px;
    }

        .book-card:hover {
            transform: translateY(-3px);
            box-shadow: 0px 6px 12px var(--hover-shadow);
        }

    .pdf-badge {
        position: absolute;
        top: 5px;
        left: 5px;
        background: var(--pdf-badge-bg);
        color: var(--pdf-badge-text);
        padding: 3px 6px;
        font-size: 12px;
        font-weight: bold;
        border-radius: 3px;
    }

    .level-badge {
        position: absolute;
        top: 5px;
        left: 5px;
        background: var(--pdf-badge-bg);
        color: var(--pdf-badge-text);
        padding: 3px 6px;
        font-size: 12px;
        font-weight: bold;
        border-radius: 3px;
        margin-left: 40px
    }

    .access-basic {
        background: #27ae60;
        color: white;
    }

    /* VIP */
    .access-vip {
        background: #f1c40f;
        color: black;
    }

    /* Pro */
    .access-pro {
        background: #c0392b;
        color: white;
    }

    .book-thumbnail {
        width: 100%;
        height: 220px;
        object-fit: cover;
        border-radius: 5px;
    }

    .book-title {
        font-size: 16px;
        font-weight: bold;
        color: black;
        margin-bottom: 10px;
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: 2;
        overflow: hidden;
        text-overflow: ellipsis;
        max-height: 2.5em;
        min-height: 2.5em;
        line-height: 1.3em;
    }

    .book-info {
        display: flex;
        flex-direction: column;
        flex-grow: 1;
        padding: 10px;
    }

    .book-downloads {
        font-size: 13px;
        color: #555;
        font-style: italic;
        margin-bottom: 5px;
    }

    .book-author {
        margin-top: auto;
        font-size: 12px;
        color: black;
    }

    .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 20px;
        margin-top: 30px;
    }

        .pagination button {
            padding: 8px 16px;
            background-color: #f0f0f0;
            border: 1px solid #ddd;
            border-radius: 4px;
            cursor: pointer;
        }

            .pagination button:disabled {
                opacity: 0.5;
                cursor: not-allowed;
            }
</style>