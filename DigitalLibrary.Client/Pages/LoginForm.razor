@using DigitalLibrary.Client.Services
@using Microsoft.AspNetCore.Components
@using System.IdentityModel.Tokens.Jwt
@inject IJSRuntime JS
@inject UserServices UserService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

@code {
    private string username = "";
    private string password = "";
    private bool rememberMe = false;
    private bool showPassword = false;
    private bool isLoggingIn = false;
    private string errorMessage = "";
    private string userRole = "";

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private async Task OnLogin()
    {
        isLoggingIn = true;
        errorMessage = "";

        var success = await UserService.LoginAsync(username, password);
        userRole = await UserService.GetUserRole();
        if ("Đăng nhập thành công!".Equals(success))
        {
            if (userRole == "reader")
            {
                Navigation.NavigateTo("/", forceLoad: true);
            }
            else if (userRole == "admin")
            {
                Navigation.NavigateTo("/admin", forceLoad: true);
            }
        }
        else
        {
            Snackbar.Add(success, Severity.Error);
        }

        isLoggingIn = false;
    }
}

<style>
    .modal {
        --bs-modal-width: 380px !important;
        --bs-modal-margin: 100px !important;
    }
</style>

<div class="modal fade show d-block" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="d-flex justify-content-center">
                <div class="card p-4 shadow-lg position-relative" style="width: 400px; border-radius: 10px;">
                    <!-- Nút đóng -->
                    <button type="button" class="btn-close position-absolute"
                            style="top: 10px; right: 10px;" @onclick="CloseLoginForm">
                    </button>

                    <h4 class="text-center mb-3">Đăng nhập</h4>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">@errorMessage</div>
                    }

                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <div class="input-group">
                            <input type="text" class="form-control" @bind-value="username" placeholder="Nhập tên tài khoản của bạn">
                        </div>
                    </div>
                    <div class="mb-3 position-relative">
                        <label class="form-label">Mật khẩu</label>
                        <div class="input-group">
                            <input type="@(!showPassword ? "password" : "text")" class="form-control" @bind-value="password" placeholder="Nhập mật khẩu">
                            <button class="btn btn-outline-secondary" type="button" @onclick="TogglePasswordVisibility">
                                <i class="fas @(showPassword ? "fa-eye-slash" : "fa-eye")"></i>
                            </button>
                        </div>
                    </div>
                    <button class="btn btn-primary w-100" @onclick="OnLogin" disabled="@isLoggingIn" style="margin-top: 20px">
                        @(isLoggingIn ? "Đang đăng nhập ..." : "Đăng nhập")
                    </button>
                    <div class="text-center mt-3">
                        <a href="/forgot-password" @onclick="CloseLoginForm" class="text-decoration-none">Quên mật khẩu?</a>
                    </div>
                    <div class="text-center mt-3">
                        <span>Chưa có tài khoản? <a href="/register" @onclick="CloseLoginForm" class="text-decoration-none">Đăng ký</a></span>
                    </div>
                    <div class="text-center mt-3">
                        <span>Hoặc đăng nhập với:</span>
                        <div class="d-flex justify-content-center mt-2">
                            <button class="btn btn-light border mx-1 rounded-circle" style="width: 40px; height: 40px;"
                            @onclick="HandleGoogleLogin">
                                <i class="fab fa-google text-danger"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>



@code {
    [Parameter] public EventCallback OnClose { get; set; }
    private DotNetObjectReference<LoginForm>? dotNetRef;

    private async Task CloseLoginForm()
    {
        if (OnClose.HasDelegate)
        {
            await OnClose.InvokeAsync(null);
        }
    }

    private async Task HandleGoogleLogin()
    {
        if (dotNetRef == null)
            dotNetRef = DotNetObjectReference.Create(this);

        var jsReady = await JS.InvokeAsync<bool>("eval", "typeof window.googleLogin !== 'undefined'");
        if (!jsReady)
        {
            Snackbar.Add("Google login chưa sẵn sàng. Vui lòng thử lại sau!", Severity.Warning);
            return;
        }

        await JS.InvokeVoidAsync("googleLogin.promptLogin", "739996315037-qj9te1o7giqi9bmlk0rod1cc2bjf989o.apps.googleusercontent.com", dotNetRef);
    }

    [JSInvokable]
    public async Task OnGoogleLoginSuccess(string idToken)
    {
        var handler = new JwtSecurityTokenHandler();
        var jwtToken = handler.ReadJwtToken(idToken);
        var email = jwtToken.Claims.FirstOrDefault(claim => claim.Type == "email")!.Value;
        var name = jwtToken.Claims.FirstOrDefault(claim => claim.Type == "name")!.Value;

        isLoggingIn = true;
        errorMessage = "";

        var success = await UserService.LoginGoogleAsync(email, name);
        userRole = await UserService.GetUserRole();
        if ("Đăng nhập thành công!".Equals(success))
        {
            if (userRole == "reader")
            {
                Navigation.NavigateTo("/", forceLoad: true);
            }
            else if (userRole == "admin")
            {
                Navigation.NavigateTo("/admin", forceLoad: true);
            }
        }
        else
        {
            Snackbar.Add(success, Severity.Error);
        }

        isLoggingIn = false;
    }
}