@page "/forgot-password"
@using System.ComponentModel.DataAnnotations
@using System.Timers
@using DigitalLibarary.Shared.DTO
@using DigitalLibrary.Client.Services
@using DigitalLibrary.Shared.DTO
@using MudBlazor
@layout EmptyLayout
@inject NavigationManager Navigation
@inject UserServices UserService
@inject UserManagementServices UserManagement
@inject ISnackbar Snackbar

<div class="forgot-password-container">
    <h2>Quên Mật Khẩu</h2>

    @if (!codeSent)
    {
        <div class="form-group">
            <label for="email">Email</label>
            <InputText id="email" @bind-Value="email" class="form-control" />
            <ValidationMessage For="@(() => email)" />
        </div>

        <button @onclick="SendVerificationCode"
                disabled="@(isSending || !IsEmailValid(email))"
                class="btn btn-primary">
            @if (isSending)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span> Đang gửi...</span>
            }
            else
            {
                <span>Gửi mã xác nhận</span>
            }
        </button>
    }
    else
    {
        <div class="form-group">
            <label for="verificationCode">Mã xác nhận</label>
            <InputText id="verificationCode" @bind-Value="verificationCode" class="form-control" />
        </div>

        <div class="form-group">
            <label for="newPassword">Mật khẩu mới</label>
            <InputText id="newPassword" type="password" @bind-Value="newPassword" class="form-control" />
        </div>

        <div class="form-group">
            <label for="confirmPassword">Xác nhận mật khẩu</label>
            <InputText id="confirmPassword" type="password" @bind-Value="confirmPassword" class="form-control" />
        </div>

        <button @onclick="ResetPassword" class="btn btn-primary">Đặt lại mật khẩu</button>

        <div class="resend-code">
            <button @onclick="ResendVerificationCode"
                    disabled="@(isResending || countdown > 0)"
                    class="btn btn-link">
                @if (isResending)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span> Đang gửi lại...</span>
                }
                else if (countdown > 0)
                {
                    <span>Gửi lại mã sau @(countdown)s</span>
                }
                else
                {
                    <span>Gửi lại mã xác nhận</span>
                }
            </button>
        </div>
    }
</div>

@code {
    private Timer countdownTimer;
    private int countdown = 0;
    private bool isSending = false;
    private bool isResending = false;
    private bool codeSent = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private int code = 0;
    private EmailSenderDTO? emailSender;
    private UsersDTO? user;

    [Required(ErrorMessage = "Email là bắt buộc")]
    [EmailAddress(ErrorMessage = "Email không hợp lệ")]
    public string email { get; set; }

    public string verificationCode { get; set; }
    public string newPassword { get; set; }
    public string confirmPassword { get; set; }

    protected override void OnInitialized()
    {
        countdownTimer = new Timer(1000);
        countdownTimer.Elapsed += OnCountdownTimerElapsed;
        countdownTimer.AutoReset = true;
    }

    private bool IsEmailValid(string email)
    {
        return new EmailAddressAttribute().IsValid(email);
    }

    private async Task SendVerificationCode()
    {
        isSending = true;
        errorMessage = string.Empty;

        try
        {
            await Task.Delay(1000);

            code = new Random().Next(100000, 999999);

            emailSender = new EmailSenderDTO
                {
                    Action = "ForgotPass",
                    ToEmail = email,
                    Code = code.ToString(),
                    FromName = "Thư viên số DungHa",
                    FromEmail = "dunghasonlla@gmail.com",
                    Subject = "Mã xác nhận đặt lại mật khẩu",
                    Body = $"Vui lòng không chia sẽ với bất kỳ ai! Mã xác nhận của bạn"
                };

            var message = await UserService.SendEmailAsync(emailSender);

            Snackbar.Add(message, Severity.Normal);

            if (!message.Equals("Email không tồn tại trong hệ thống!")
                && !message.Equals("Gửi mã xác nhận thất bại!"))
            {
                user = await UserManagement.FindUserByEmailAsync(email);
                codeSent = true;
                StartCountdown(120);
                Snackbar.Add("Nếu không thấy thư hãy kiểm tra ở mục tất cả thư", Severity.Info);
            }
        }
        catch (Exception)
        {
            Snackbar.Add("Có lỗi xảy ra khi gửi mã xác nhận", Severity.Error);
        }
        finally
        {
            isSending = false;
        }
    }

    private async Task ResendVerificationCode()
    {
        isResending = true;
        errorMessage = string.Empty;

        try
        {
            await Task.Delay(1000);
            code = new Random().Next(100000, 999999);

            emailSender = new EmailSenderDTO
                {
                    ToEmail = email,
                    Code = code.ToString(),
                    FromName = "Thư viên số DungHa",
                    FromEmail = "dunghasonlla@gmail.com",
                    Subject = "Mã xác nhận đặt lại mật khẩu",
                    Body = $"Vui lòng không chia sẽ với bất kỳ ai! Mã xác nhận của bạn"
                };

            var message = await UserService.SendEmailAsync(emailSender);

            if (!message.Equals("Email không tồn tại trong hệ thống!")
                && !message.Equals("Gửi mã xác nhận thất bại!"))
            {
                StartCountdown(120);
                Snackbar.Add("Mã xác nhận mới đã được gửi đến email của bạn. Hãy kiểm tra trong mục tất cả thư", Severity.Success);
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add("Có lỗi xảy ra khi gửi lại mã xác nhận!", Severity.Error);
        }
        finally
        {
            isResending = false;
        }
    }

    private async Task ResetPassword()
    {
        errorMessage = string.Empty;

        if (string.IsNullOrWhiteSpace(verificationCode))
        {
            Snackbar.Add("Vui lòng nhập mã xác nhận", Severity.Warning);
            return;
        }

        if (string.IsNullOrWhiteSpace(newPassword))
        {
            Snackbar.Add("Vui lòng nhập mật khẩu mới", Severity.Warning);
            return;
        }

        if (newPassword != confirmPassword)
        {
            Snackbar.Add("Mật khẩu xác nhận không khớp", Severity.Warning);
            return;
        }

        if (int.Parse(verificationCode) != code)
        {
            Snackbar.Add("Mã xác nhận không chính xác", Severity.Warning);
            return;
        }

        try
        {
            if (user != null)
            {
                var changePass = new ChangePassDTO
                    {
                        userid = user.id,
                        newPass = newPassword,
                        email = email
                    };

                var status = await UserManagement.ChangePassAsync(changePass);

                if (status)
                {
                    Snackbar.Add("Đặt lại mật khẩu thành công!", Severity.Success);
                    await Task.Delay(2000);
                    Navigation.NavigateTo("/");
                }
                else
                {
                    Snackbar.Add("Có lỗi xảy ra khi đặt lại mật khẩu!", Severity.Error);
                }
            }
        }
        catch (Exception)
        {
            Snackbar.Add("Có lỗi xảy ra khi đặt lại mật khẩu!", Severity.Error);
        }
    }

    private void StartCountdown(int seconds)
    {
        countdown = seconds;
        countdownTimer.Start();
        StateHasChanged();
    }

    private void OnCountdownTimerElapsed(object sender, ElapsedEventArgs e)
    {
        countdown--;

        if (countdown <= 0)
        {
            countdownTimer.Stop();
        }

        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        countdownTimer?.Dispose();
    }
}

<style>
    body {
        padding-top: 0px !important;
    }

    .forgot-password-container {
        max-width: 500px;
        margin: 2rem auto;
        padding: 2rem;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .resend-code {
        margin-top: 1rem;
        text-align: center;
    }

    .btn-link {
        padding: 0;
        border: 0;
        background: none;
        color: #007bff;
        cursor: pointer;
    }

        .btn-link:disabled {
            color: #6c757d;
            cursor: not-allowed;
            text-decoration: none;
        }
</style>