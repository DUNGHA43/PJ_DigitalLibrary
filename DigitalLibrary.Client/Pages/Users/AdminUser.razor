@page "/admin/users"
@using DigitalLibrary.Client.Services
@using DigitalLibrary.Shared.DTO
@using MudBlazor
@layout AdminLayout
@inject NavigationManager Navigation
@inject UserManagementServices UserManagement
@inject RoleServices Role
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<ConfirmDialog @ref="confirmDialog" Title="Xác nhận xóa"
Message="Bạn có chắc chắn muốn xóa người dùng này này?"
OnConfirm="DeleteUser" />

<h3 class="d-flex align-items-center border-bottom pb-2">
    <span class="me-2" style="font-size: 1.5rem;">👫</span>
    <span class="fw-bold text-dark">Quản lý người dùng</span>
</h3>

<div class="d-flex justify-content-between" style="margin-top:30px">
    <div class="input-group w-50 align-items-center gap-2 search-container">
        <div class="search-row">
            <input @bind="searchName" class="form-control" placeholder="Nhập họ tên" />
            <input @bind="searchEmail" class="form-control" placeholder="Nhập email" />
        </div>

        <div class="search-row">
            <select class="form-select" @bind="searchStringRole">
                <option value="">-- Chọn vai trò --</option>
                @foreach (var roles in lstRoles)
                {
                    <option value="@roles.id">@roles.rolenamevn</option>
                }
            </select>

            <select class="form-select" @bind="searchStringStatus">
                <option value="">-- Chọn trạng thái --</option>
                <option value="true">Kích hoạt</option>
                <option value="false">Vô hiệu</option>
            </select>

            <button class="btn btn-primary" @onclick="Search">🔍 Tìm kiếm</button>
        </div>
    </div>
    <div>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#AddUser">➕ Thêm mới</button>
        <AddUser OnUserAdded="ReloadData"></AddUser>
        <button class="btn btn-danger" @onclick="() => ConfirmDelete(null)">🗑 Xóa nhiều</button>
    </div>
</div>

<table class="table table-striped mt-3" style="margin-top:35px !important">
    <thead>
        <tr>
            <th><input type="checkbox" /></th>
            <th class="text-center">STT</th>
            <th class="text-center">Tên tài khoản</th>
            <th class="text-center">Enail</th>
            <th class="text-center">Quyền</th>
            <th class="text-center">Họ tên</th>
            <th class="text-center">Giới tính</th>
            <th class="text-center">Ngày tạo</th>
            <th class="text-center">Trạng thái</th>
            <th class="text-center">Thao tác</th>
        </tr>
    </thead>
    <tbody>
        @if(filteredUsers.Count > 0){
            @foreach (var (user, index) in filteredUsers.Select((c, i) => (c, i)))
            {
                <tr>
                    <td><input type="checkbox" checked="@selectedIds.Contains(user.id)" @onchange="(e) => ToggleSelection(user.id, (bool)e.Value)" /></td>
                    <td class="text-center">@(index + 1 + (currentPage - 1) * pageSize)</td>
                    <td class="text-center">@user.username</td>
                    <td class="text-center">@user.email</td>
                    <td class="text-center">@(lstRoles.FirstOrDefault(r => r.id == user.roleid)?.rolenamevn ?? "Không xác định")</td>
                    <td class="text-center">@user.fullname</td>
                    <td class="text-center">
                        @if (user.gender)
                        {
                            <span class="badge bg-warning">Nam</span>
                        }
                        else
                        {
                            <span class="badge bg-info">Nữ</span>
                        }
                    </td>
                    <td class="text-center">@user.createdate</td>
                    <td class="text-center">
                        @if (user.status)
                        {
                            <span class="badge bg-success">KÍCH HOẠT</span>
                        }
                        else
                        {
                            <span class="badge bg-danger">VÔ HIỆU</span>
                        }
                    </td>
                    <td class="text-center">
                        <button class="btn btn-sm btn-warning" data-bs-toggle="modal" data-bs-target="#DetailUser" @onclick="() => OpenDetailModal(user)">ℹ️</button>
                        <DetailUser User="selectedUser"></DetailUser>

                        <button class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#PermissionUser"  @onclick="() => ViewPermission(user)">📋</button>
                        <PermissionUser User="selectedUser" OnUserEditPermission="ReloadData"></PermissionUser>

                        <button class="btn btn-sm btn-success" data-bs-toggle="modal" data-bs-target="#EditUser" @onclick="() => OpenEditModal(user)">✏️</button>
                        <EditUser User="selectedUser" OnUserEdited="ReloadData"></EditUser>

                        <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(user.id)">🗑</button>
                    </td>
                </tr>
            }
        }
        else{
            <tr>
                <td colspan="10" class="text-center fw-bold text-muted py-3">Đang tải...</td>
            </tr>
        }
    </tbody>
</table>

<div class="d-flex justify-content-between align-items-center mt-3">
    <button class="btn btn-outline-primary" @onclick="PreviousPage" disabled="@(!CanPrevious)">⬅ Trang trước</button>
    <span>Trang @currentPage / @totalPages</span>
    <button class="btn btn-outline-primary" @onclick="NextPage" disabled="@(!CanNext)">Trang sau ➡</button>
</div>

@code{
    private List<UsersDTO> filteredUsers = new();
    private List<RolesDTO> lstRoles = new List<RolesDTO>();
    private int selectedId;
    private ConfirmDialog? confirmDialog;
    private UsersDTO selectedUser = new UsersDTO();
    private string searchName = "";
    string searchEmail = "";
    string? searchStringRole = "";
    int? searchRole = null;
    private string? searchStringStatus = "";
    private bool? searchStatus = null;
    private List<int> selectedIds = new List<int>();

    private int currentPage = 1;
    private int pageSize = 10;
    private int totalRecords;
    private int totalPages => (int)Math.Ceiling((double)totalRecords / pageSize);
    private bool CanPrevious => currentPage > 1;
    private bool CanNext => currentPage < totalPages;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        lstRoles = await Role.GetAllAsync();
    }

    private async Task LoadData()
    {
        searchRole = null;
        if(!string.IsNullOrEmpty(searchStringRole))
        {
            searchRole = int.Parse(searchStringRole);
        }
        searchStatus = null;
        if (!string.IsNullOrEmpty(searchStringStatus))
        {
            searchStatus = bool.Parse(searchStringStatus);
        }

        var response = await UserManagement.GetUsersAsync(currentPage, pageSize, searchName, searchEmail, searchRole, searchStatus);

        if (response != null)
        {
            filteredUsers = response.Data;
            totalRecords = response.TotalRecords;
            StateHasChanged();
        }
        else
        {
            filteredUsers = new List<UsersDTO>();
        }
    }

    private async Task Search()
    {
        currentPage = 1;
        await LoadData();
    }

    private async Task ReloadData(string message)
    {
        if (message.Contains("Thêm"))
        {
            currentPage = 1;
        }
        await LoadData();
        var severity = message.Contains("✅") ? Severity.Success : Severity.Error;
        Snackbar.Add(message, severity);
    }

    private async Task ConfirmDelete(int? id = null)
    {
        if (id.HasValue)
        {
            selectedId = id.Value;
            selectedIds.Clear();
        }
        else
        {
            selectedId = 0;
        }

        if ((selectedIds.Count > 0 && selectedId == 0) || selectedId > 0)
        {
            confirmDialog?.Show();
        }
        else
        {
            Snackbar.Add("Chưa chọn bản ghi nào!", Severity.Warning);
        }
    }

    private async Task DeleteUser(bool confirm)
    {
        if (confirm)
        {
            bool isDeleted = false;

            if (selectedIds.Any())
            {
                isDeleted = await UserManagement.DeleteUsersMultiAsync(selectedIds);
            }
            else if (selectedId > 0)
            {
                isDeleted = await UserManagement.DeleteUserAsync(selectedId);
            }

            if (isDeleted)
            {
                await LoadData();
                Snackbar.Add("✅ Xóa người dùng thành công!", Severity.Success);
            }
            else
            {
                Snackbar.Add("❌ Xóa người dùng thất bại!", Severity.Error);
            }
        }
    }

    private void ToggleSelection(int id, bool isChecked)
    {
        if (isChecked)
        {
            if (!selectedIds.Contains(id))
                selectedIds.Add(id);
        }
        else
        {
            selectedIds.Remove(id);
        }
    }

    private bool IsChecked(int id) => selectedIds.Contains(id);

    private void OpenEditModal(UsersDTO user)
    {
        selectedUser = user;
    }

    private void OpenDetailModal(UsersDTO user)
    {
        selectedUser = user;
    }

    public void ViewPermission(UsersDTO user)
    {
        selectedUser = user;
    }

    private async Task PreviousPage()
    {
        if (CanPrevious)
        {
            currentPage--;
            await LoadData();
        }
    }

    private async Task NextPage()
    {
        if (CanNext)
        {
            currentPage++;
            await LoadData();
        }
    }
}

<style>
    h3 {
        font-size: 1.8rem;
        font-weight: bold;
        text-transform: uppercase;
        margin-bottom: 10px;
    }

        h3 span.text-primary {
            text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.1);
        }

    td button {
        width: 50px !important;
    }

    .search-container {
        display: flex;
        flex-direction: column;
        gap: 10px;
        width: 100%;
    }

    .search-row {
        display: flex;
        gap: 10px;
        width: 100%;
    }

        .search-row input {
            flex: 1;
            min-width: 200px;
        }

        .search-row select {
            flex: 1;
            min-width: 200px;
        }

</style>